# This program will create a blockchain that although can be interacted with in any HTTP client, 
# Postman offers a clean and intuitive interface and has been used to execute the code in the program.

# To be installed:
# Flask==0.12.2: pip install Flask==0.12.2
# Postman HTTP Client: https://www.getpostman.com/

import datetime                     # each block will have its own timestamp
import hashlib                      # using the hash library to hash the blocks
import json                         # using json.dumps to encode the blocks before we hash them
from flask import Flask, jsonify    # used to return the messages in postman when we interact with the blockchain


# part 1 - building the blockchain


class Blockchain:

    def __init__(self):
        self.chain = []
        self.create_block(previous_hash='0')

    def create_block(self, previous_hash):
        block = {'index': len(self.chain) + 1,
                 'timestamp': str(datetime.datetime.now()),
                 'previous_hash': previous_hash}
        block = self.proof_of_work(block)
        self.chain.append({'hash': self.hash(block), 'block': block})
        return block

    def get_previous_block(self):
        """self.chain is the list of all current blocks in the block chain
        that can be called at any time"""
        return self.chain[-1]  # this returns the last previous block

    def proof_of_work(self, block):
        block['proof'] = 1
        check_proof = False
        while check_proof is False:
            hash_operation = self.hash(block)
            if hash_operation[:4] == '0000':
                check_proof = True
            else:
                block['proof'] += 1
        return block

    def hash(self, block):
        encoded_block = json.dumps(block, sort_keys = True).encode()
        return hashlib.sha256(encoded_block).hexdigest()

    def is_chain_valid(self, chain):
        previous_block = chain[0]['block']
        block_index = 1
        while block_index < len(chain):
            block = chain[block_index]['block']
            if block['previous_hash'] != self.hash(previous_block):
                return False
            hash_operation = self.hash(block)
            if hash_operation[:4] != '0000':
                return False
            previous_block = block
            block_index += 1
        return True


# part 2 mining our blockchain


# creating a web app
app = Flask(__name__)

#  creating the blockchain
blockchain = Blockchain()


@app.route('/mine_block', methods=['GET'])
def mine_block():
    previous_block = blockchain.get_previous_block()
    previous_hash = previous_block['hash']
    block = blockchain.create_block(previous_hash)
    response = {'message': 'Congratulations, you just mined a block!',
                'index': block['index'],
                'timestamp': block['timestamp'],
                'proof': block['proof'],
                'previous_hash': block['previous_hash']}
    return jsonify(response), 200


# getting the chain to display in postman
@app.route('/get_chain', methods=['GET'])
def get_chain():
    response = {'chain': blockchain.chain,
                'length': len(blockchain.chain)}
    return jsonify(response), 200

# check it is valid
@app.route('/is_valid', methods=['GET'])
def is_valid():
    is_valid = blockchain.is_chain_valid(blockchain.chain)
    if is_valid:
        response = {'message': 'Looking good! The blockchain is valid'}
    else:
        response = {'message': 'Houston, we have a problem'}
    return jsonify(response), 200


# run the app
app.run(host='0.0.0.0', port = 5000)
